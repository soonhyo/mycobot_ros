#! /usr/bin/env python3
import rospy
import cv2
import actionlib
import message_filters
from sensor_msgs.msg import Image, PointCloud2
from cv_bridge import CvBridge
from hair_flow_detect.msg import *
from mycobot_280_moveit.msg import *
import time
class PathPcdClient(object):
    def __init__(self):
        self.pathfollowclient = actionlib.SimpleActionClient('path_follower', PathFollowAction)
        self.pathfollowclient.wait_for_server()
        rospy.loginfo("path follow server online")

        self.image_sub = message_filters.Subscriber(rospy.get_param("~input_image","/camera/rgb/image_rect_color"), Image)
        self.pcd_sub = message_filters.Subscriber(rospy.get_param("~input_points","/camera/depth_registered/points"), PointCloud2)
        self.ts = message_filters.ApproximateTimeSynchronizer([self.image_sub, self.pcd_sub], 10, 0.1, allow_headerless=True)
        self.ts.registerCallback(self.img_pcd_callback)
        self.bridge = CvBridge()

    def img_pcd_callback(self, imgmsg, pcdmsg):
        ### crop head###
        # Create an action goal and send it to the server
        goal = HeadCropGoal(imgmsg)
        self.headcrop_client.send_goal(goal)

        # Wait for the result and process it
        self.headcrop_client.wait_for_result()
        result = self.headcrop_client.get_result()
        if self.headcrop_client.get_state() == actionlib.GoalStatus.ABORTED:
            rospy.loginfo("No Face detected")
            return
        # cropped head image
        # head_image = self.bridge.imgmsg_to_cv2(result.head_image, "bgr8")
        print("croped head")

        ###seg hair###
        # Create an action goal and send it to the server
        seghair_goal = SegHairGoal(result.head_image)
        self.seghair_client.send_goal(seghair_goal)
        # Wait for the result and process it
        self.seghair_client.wait_for_result()
        seghair_result = self.seghair_client.get_result()
        if self.seghair_client.get_state() == actionlib.GoalStatus.ABORTED:
            rospy.loginfo("No Hair detected")
            return

        ### comb path ###
        combpath_goal = CombPathGoal()
        combpath_goal.seg_image = seghair_result.seg_hair_image
        combpath_goal.mask = seghair_result.mask

        self.combpath_client.send_goal(combpath_goal)

        # Wait for the result and process it
        self.combpath_client.wait_for_result()
        combpath_result = self.combpath_client.get_result()
        if self.combpath_client.get_state() == actionlib.GoalStatus.ABORTED:
            rospy.loginfo("No Comb Path detected")
            return
        print("comb path: ", combpath_result.path)

        ### path pcd ###
        pathpcd_goal = PathPcdGoal()
        pathpcd_goal.path = combpath_result.path
        pathpcd_goal.pointcloud = pcdmsg
        pathpcd_goal.mask = seghair_result.mask

        self.pathpcd_client.send_goal(pathpcd_goal)

        print(rospy.Time.now().to_sec())

        # Wait for the result and process it
        self.pathpcd_client.wait_for_result()
        pathpcd_result = self.pathpcd_client.get_result()
        if self.pathpcd_client.get_state() == actionlib.GoalStatus.ABORTED:
            rospy.loginfo("No Path Pcd Detected")
            return
        rospy.loginfo(pathpcd_result.pose_array)

        ### path follower ###

        goal = PathFollowGoal()
        goal.path = pathpcd_result.pose_array

        self.pathfollowclient.send_goal(goal)

        # Wait for the result and process it
        self.pathfollowclient.wait_for_result()
        pathfollow_result = self.pathfollowclient.get_result()
        if self.pathfollowclient.get_state() == actionlib.GoalStatus.ABORTED:
            rospy.loginfo("Failed Moveit")
            return
        rospy.loginfo("Succeeded Moveit")

        # try:
        #     # print("path pcd: ", pathpcd_result.pose_array)
        # except:
        #     continue
        # Display the debug image
        # seghair_image = self.bridge.imgmsg_to_cv2(seghair_result.seg_hair_image, "bgr8")
        # print("segmented hair")

        # cv2.imshow("test", seghair_image)
        # cv2.waitKey(1)

if __name__ == '__main__':
    rospy.init_node('pathpcd_client')
    client = PathPcdClient()
    rospy.spin()
