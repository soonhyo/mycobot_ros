#! /usr/bin/env python3
import rospy
import cv2
import actionlib
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from hair_flow_detect.msg import HeadCropGoal, HeadCropAction

class HeadCropClient(object):
    def __init__(self):
        self.client = actionlib.SimpleActionClient('head_crop', HeadCropAction)
        self.client.wait_for_server()
        self.image_sub = rospy.Subscriber("/camera/color/image_raw", Image, self.image_callback)
        self.bridge = CvBridge()

    def image_callback(self, data):
        # Convert the ROS image to OpenCV format
        image = self.bridge.imgmsg_to_cv2(data, "bgr8")

        # Create an action goal and send it to the server
        goal = HeadCropGoal(data)
        self.client.send_goal(goal)

        # Wait for the result and process it
        self.client.wait_for_result()
        result = self.client.get_result()
        if self.client.get_state() == actionlib.GoalStatus.ABORTED:
            rospy.loginfo("No Face detected")
            return
        # Display the cropped head image
        head_image = self.bridge.imgmsg_to_cv2(result.head_image, "bgr8")
        cv2.imshow("Head", head_image)
        cv2.waitKey(1)

if __name__ == '__main__':
    rospy.init_node('head_crop_client')
    client = HeadCropClient()
    rospy.spin()
